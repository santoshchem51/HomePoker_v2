/**
 * Live Game Screen - Epic 3: Settlement Optimization
 * Story 3.1: Early Cash-out Calculator Implementation
 * 
 * Main poker session screen that integrates all game functionality including early cash-out
 */

import React, { useState, useEffect, useCallback } from 'react';
import {
  View,
  Text,
  StyleSheet,
  ScrollView,
  TouchableOpacity,
  RefreshControl,
  Alert,
  Modal,
} from 'react-native';
import { TransactionForm } from './TransactionForm';
import { EarlyCashOutCalculator } from '../../components/settlement/EarlyCashOutCalculator';
import { useSessionStore } from '../../stores/sessionStore';
// Note: Transaction functionality integrated into session store
// import { useTransactionStore } from '../../stores/transactionStore';
import { useSettlementStore } from '../../stores/settlementStore';
import { Player } from '../../types/player';
import { EarlyCashOutResult } from '../../types/settlement';
import { ServiceError } from '../../services/core/ServiceError';

interface LiveGameScreenProps {
  sessionId: string;
  onEndSession?: () => void;
  onNavigateToHistory?: () => void;
}

export const LiveGameScreen: React.FC<LiveGameScreenProps> = ({
  sessionId,
  onEndSession,
  onNavigateToHistory,
}) => {
  // State
  const [showEarlyCashOut, setShowEarlyCashOut] = useState(false);
  const [selectedPlayer, setSelectedPlayer] = useState<Player | null>(null);
  const [refreshing, setRefreshing] = useState(false);
  const [_showSettlementSummary, setShowSettlementSummary] = useState(false);

  // Store hooks
  const {
    currentSession,
    players,
    loading: _loading,
    error: sessionError,
    actions: { loadSessionState }
  } = useSessionStore();

  // Transaction functionality is integrated into sessionStore
  const transactionLoading = false;
  const transactionError: ServiceError | null = null;

  const {
    currentBankBalance,
    calculateBankBalance,
    clearCurrentResult,
  } = useSettlementStore();

  // Load session data on mount
  useEffect(() => {
    if (sessionId) {
      loadSessionState(sessionId);
      calculateBankBalance(sessionId);
    }
  }, [sessionId, loadSessionState, calculateBankBalance]);

  // Refresh functionality
  const handleRefresh = useCallback(async () => {
    setRefreshing(true);
    try {
      await loadSessionState(sessionId);
      await calculateBankBalance(sessionId);
    } catch (error) {
      console.error('Failed to refresh:', error);
    } finally {
      setRefreshing(false);
    }
  }, [sessionId, loadSessionState, calculateBankBalance]);

  // Transaction handlers
  const handleBuyIn = useCallback(async (playerId: string, amount: number) => {
    try {
      // TODO: Implement transaction handling when transactionStore is available
      console.log('Buy-in transaction:', { sessionId, playerId, amount });
      
      // Refresh bank balance after transaction
      await calculateBankBalance(sessionId);
    } catch (error) {
      throw error; // Re-throw to let TransactionForm handle the error display
    }
  }, [sessionId, calculateBankBalance]);

  const handleCashOut = useCallback(async (playerId: string, amount: number, organizerConfirmed?: boolean) => {
    try {
      // TODO: Implement transaction handling when transactionStore is available
      console.log('Cash-out transaction:', { sessionId, playerId, amount, organizerConfirmed });
      
      // Refresh bank balance after transaction
      await calculateBankBalance(sessionId);
    } catch (error) {
      throw error; // Re-throw to let TransactionForm handle the error display
    }
  }, [sessionId, calculateBankBalance]);

  // Early cash-out handlers
  const handleShowEarlyCashOut = useCallback((player: Player) => {
    setSelectedPlayer(player);
    setShowEarlyCashOut(true);
  }, []);

  const handleEarlyCashOutComplete = useCallback((_result: EarlyCashOutResult) => {
    setShowSettlementSummary(true);
    
    // Auto-close after showing result
    setTimeout(() => {
      setShowEarlyCashOut(false);
      setSelectedPlayer(null);
    }, 2000);
  }, []);

  const handleCloseEarlyCashOut = useCallback(() => {
    setShowEarlyCashOut(false);
    setSelectedPlayer(null);
    clearCurrentResult();
  }, [clearCurrentResult]);

  // Get active players for early cash-out
  const getActivePlayers = useCallback(() => {
    return players.filter(player => 
      player.status === 'active' && player.currentBalance > 0
    );
  }, [players]);

  const activePlayers = getActivePlayers();

  // Format currency
  const formatCurrency = (amount: number): string => {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD',
    }).format(amount);
  };

  // Error handling
  if (sessionError) {
    return (
      <View style={styles.errorContainer}>
        <Text style={styles.errorTitle}>Session Error</Text>
        <Text style={styles.errorMessage}>{typeof sessionError === 'string' ? sessionError : 'Session error occurred'}</Text>
        <TouchableOpacity style={styles.retryButton} onPress={handleRefresh}>
          <Text style={styles.retryButtonText}>Retry</Text>
        </TouchableOpacity>
      </View>
    );
  }

  if (!currentSession) {
    return (
      <View style={styles.loadingContainer}>
        <Text style={styles.loadingText}>Loading session...</Text>
      </View>
    );
  }

  return (
    <View style={styles.container}>
      {/* Header */}
      <View style={styles.header}>
        <View style={styles.sessionInfo}>
          <Text style={styles.sessionName}>{currentSession.name}</Text>
          <Text style={styles.sessionStatus}>Live Game • {players.length} Players</Text>
        </View>
        
        {/* Bank Balance Display */}
        {currentBankBalance && (
          <View style={styles.bankContainer}>
            <Text style={styles.bankLabel}>Bank Balance</Text>
            <Text style={styles.bankAmount}>
              {formatCurrency(currentBankBalance.availableForCashOut)}
            </Text>
            {!currentBankBalance.isBalanced && (
              <Text style={styles.bankWarning}>⚠️ Imbalanced</Text>
            )}
          </View>
        )}
      </View>

      <ScrollView
        style={styles.content}
        refreshControl={
          <RefreshControl refreshing={refreshing} onRefresh={handleRefresh} />
        }
      >
        {/* Player List with Early Cash-out Options */}
        <View style={styles.playersSection}>
          <Text style={styles.sectionTitle}>Active Players</Text>
          
          {activePlayers.length > 0 ? (
            activePlayers.map((player) => (
              <View key={player.id} style={styles.playerCard}>
                <View style={styles.playerInfo}>
                  <Text style={styles.playerName}>{player.name}</Text>
                  <Text style={styles.playerBalance}>
                    Balance: {formatCurrency(player.currentBalance)}
                  </Text>
                </View>
                
                <TouchableOpacity
                  style={styles.cashOutButton}
                  onPress={() => handleShowEarlyCashOut(player)}
                >
                  <Text style={styles.cashOutButtonText}>Early Cash-out</Text>
                </TouchableOpacity>
              </View>
            ))
          ) : (
            <Text style={styles.noPlayersText}>No active players with balance</Text>
          )}
        </View>

        {/* Transaction Form */}
        <TransactionForm
          sessionId={sessionId}
          players={players}
          onSubmitBuyIn={handleBuyIn}
          onSubmitCashOut={handleCashOut}
          loading={transactionLoading}
        />

        {/* Action Buttons */}
        <View style={styles.actionButtons}>
          {onNavigateToHistory && (
            <TouchableOpacity
              style={[styles.actionButton, styles.historyButton]}
              onPress={onNavigateToHistory}
            >
              <Text style={styles.actionButtonText}>View History</Text>
            </TouchableOpacity>
          )}
          
          {onEndSession && (
            <TouchableOpacity
              style={[styles.actionButton, styles.endSessionButton]}
              onPress={() => {
                Alert.alert(
                  'End Session',
                  'Are you sure you want to end this poker session?',
                  [
                    { text: 'Cancel', style: 'cancel' },
                    { text: 'End Session', style: 'destructive', onPress: onEndSession },
                  ]
                );
              }}
            >
              <Text style={styles.actionButtonText}>End Session</Text>
            </TouchableOpacity>
          )}
        </View>
      </ScrollView>

      {/* Early Cash-out Modal */}
      <Modal
        visible={showEarlyCashOut}
        animationType="slide"
        presentationStyle="pageSheet"
        onRequestClose={handleCloseEarlyCashOut}
      >
        <View style={styles.modalContainer}>
          {selectedPlayer && (
            <EarlyCashOutCalculator
              sessionId={sessionId}
              playerId={selectedPlayer.id}
              playerName={selectedPlayer.name}
              onCalculationComplete={handleEarlyCashOutComplete}
              onClose={handleCloseEarlyCashOut}
            />
          )}
        </View>
      </Modal>

      {/* Transaction Error Display */}
      {transactionError && (
        <View style={styles.transactionErrorContainer}>
          <Text style={styles.transactionErrorText}>
            Transaction Error: {transactionError ? (typeof transactionError === 'string' ? transactionError : 'Transaction error occurred') : 'Unknown error'}
          </Text>
        </View>
      )}
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#F5F5F5',
  },
  
  header: {
    backgroundColor: '#FFFFFF',
    padding: 16,
    paddingTop: 20,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  
  sessionInfo: {
    marginBottom: 12,
  },
  
  sessionName: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#1976D2',
    marginBottom: 4,
  },
  
  sessionStatus: {
    fontSize: 14,
    color: '#666',
  },
  
  bankContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    backgroundColor: '#E3F2FD',
    padding: 12,
    borderRadius: 8,
  },
  
  bankLabel: {
    fontSize: 14,
    color: '#1565C0',
    fontWeight: '500',
  },
  
  bankAmount: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#1565C0',
  },
  
  bankWarning: {
    fontSize: 12,
    color: '#F57C00',
  },
  
  content: {
    flex: 1,
  },
  
  playersSection: {
    margin: 16,
    backgroundColor: '#FFFFFF',
    borderRadius: 12,
    padding: 16,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  
  sectionTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 12,
  },
  
  playerCard: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingVertical: 12,
    borderBottomWidth: 1,
    borderBottomColor: '#E0E0E0',
  },
  
  playerInfo: {
    flex: 1,
  },
  
  playerName: {
    fontSize: 16,
    fontWeight: '600',
    color: '#333',
    marginBottom: 2,
  },
  
  playerBalance: {
    fontSize: 14,
    color: '#666',
  },
  
  cashOutButton: {
    backgroundColor: '#FF9800',
    paddingHorizontal: 12,
    paddingVertical: 6,
    borderRadius: 6,
  },
  
  cashOutButtonText: {
    color: '#FFFFFF',
    fontSize: 12,
    fontWeight: '600',
  },
  
  noPlayersText: {
    textAlign: 'center',
    color: '#999',
    fontStyle: 'italic',
    paddingVertical: 20,
  },
  
  actionButtons: {
    flexDirection: 'row',
    padding: 16,
    gap: 12,
  },
  
  actionButton: {
    flex: 1,
    paddingVertical: 14,
    borderRadius: 8,
    alignItems: 'center',
  },
  
  historyButton: {
    backgroundColor: '#607D8B',
  },
  
  endSessionButton: {
    backgroundColor: '#F44336',
  },
  
  actionButtonText: {
    color: '#FFFFFF',
    fontSize: 16,
    fontWeight: '600',
  },
  
  modalContainer: {
    flex: 1,
    backgroundColor: '#F5F5F5',
  },
  
  errorContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 20,
  },
  
  errorTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#F44336',
    marginBottom: 12,
  },
  
  errorMessage: {
    fontSize: 16,
    color: '#666',
    textAlign: 'center',
    marginBottom: 20,
  },
  
  retryButton: {
    backgroundColor: '#1976D2',
    paddingHorizontal: 20,
    paddingVertical: 12,
    borderRadius: 8,
  },
  
  retryButtonText: {
    color: '#FFFFFF',
    fontSize: 16,
    fontWeight: '600',
  },
  
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  
  loadingText: {
    fontSize: 16,
    color: '#666',
  },
  
  transactionErrorContainer: {
    position: 'absolute',
    bottom: 16,
    left: 16,
    right: 16,
    backgroundColor: '#FFEBEE',
    borderRadius: 8,
    padding: 12,
  },
  
  transactionErrorText: {
    color: '#C62828',
    fontSize: 14,
    textAlign: 'center',
  },
});